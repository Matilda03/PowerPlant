{"version":3,"sources":["index.tsx"],"names":["NativeModules","NativeEventEmitter","AppState","useEffect","useState","useRef","RNEsp32Idf","eventEmitter","useProvisioning","devicePrefix","pop","message","console","log","msg","bleDevices","setBleDevices","wifiAPs","setWifiAPs","loading","setLoading","status","setStatus","scanBle","isConnecting","currentStep","setCurrentStep","provSent","setProvSent","initStep","sendingWifiCredential","provApplied","setProvApplied","confirmWifiConnection","provFinal","setProvFinal","currentWifi","currentDevice","connectDevice","bleDevice","current","stopBleScan","serviceUuid","configWifi","wifi","ssid","auth","doProvisioning","addListener","event","wifiList","disconnectDevice","removeAllListeners","_handleAppStateChange","nextAppState","result","checkPermissions","startBleScan","addEventListener","startWifiScan","type","enableBluetooth","enableLocation","removeEventListener","Array","deviceName","prev","some","it","concat","scanBleFailed","scanWifi","connectFailed","disconnected","doneStep","initSessionError","done","progress","completed","applyError","results","_wifi","password","failed"],"mappings":"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","sourcesContent":["import {\n\tNativeModules,\n\tNativeEventEmitter,\n\tEmitterSubscription,\n\tAppState,\n\tAppStateStatus,\n} from 'react-native';\nimport { useEffect, useState, useRef } from 'react'\n\nexport type EspProvisioning = {\n\t/**\n\t * check if has proper permissions, if not will request the needed permissions at native\n\t */\n\tcheckPermissions(): Promise<boolean>\n\t/**\n\t * search BLE ESP device\n\t * @param prefix prefix of device name\n\t */\n\tstartBleScan(prefix: string | null): Promise<boolean>\n\tstopBleScan(): void\n\t/**\n\t * connect to an ESP device\n\t * @param uuid device serviceID\n\t * @param pop proof of possession\n\t */\n\tconnectDevice(uuid: string, pop: string | null): Promise<boolean>\n\t/**\n\t * connet to an ESP device through wifi\n\t * @param pop proof of possession\n\t */\n\tconnectWifiDevice(pop: string | null): Promise<boolean>\n\t/**\n\t * disconnect the connected ESP device\n\t */\n\tdisconnectDevice(): void\n\t/**\n\t *\n\t */\n\tstartWifiScan(): Promise<boolean>\n\t/**\n\t * provisioning Wi-Fi configuration\n\t * @param ssidValue Wi-Fi SSID\n\t * @param passphraseValue password\n\t */\n\tdoProvisioning(ssidValue: string, passphraseValue: string): Promise<boolean>\n}\n\ndeclare enum BleScanStatus {\n\tFAILED = 0,\n\tCOMPLETED = 1,\n}\nexport interface BleScanEvent {\n\tstatus: BleScanStatus\n}\nexport interface BleDevice {\n\tdeviceName: string\n\tserviceUuid: string\n}\n\ntype BleScanEventListener = (\n\tevent: BleScanEvent | BleDevice | BleDevice[]\n) => void\n\nexport interface EspEventEmitter extends NativeEventEmitter {\n\taddListener(\n\t\teventType: 'scanBle',\n\t\tlistener: BleScanEventListener\n\t): EmitterSubscription\n}\n\ndeclare enum DeviceConnectionStatus {\n\tCONNECTED = 1,\n\tFAILED = 2,\n\tDISCONNECTED = 3,\n}\nexport interface DeviceConnectionEvent {\n\tstatus: DeviceConnectionStatus\n}\ntype DeviceConnectionEventListener = (event: DeviceConnectionEvent) => void\nexport interface EspEventEmitter extends NativeEventEmitter {\n\taddListener(\n\t\teventType: 'connection',\n\t\tlistener: DeviceConnectionEventListener\n\t): EmitterSubscription\n}\n\ndeclare enum WifiScanStatus {\n\tFAILED = 0,\n}\ndeclare enum WifiAuthMode {\n\tWIFI_UNKNOWN = -1,\n\tWIFI_OPEN = 0,\n\tWIFI_WEP = 1,\n\tWIFI_WPA_PSK = 2,\n\tWIFI_WPA2_PSK = 3,\n\tWIFI_WPA_WPA2_PSK = 4,\n\tWIFI_WPA2_ENTERPRISE = 5,\n}\nexport interface WifiAP {\n\tssid: string\n\tauth: WifiAuthMode\n\trssi: number\n}\nexport type WifiAPWithPwd = WifiAP & { password: string }\nexport interface WifiScanEvent {\n\tstatus?: WifiScanStatus\n\tmessage?: string\n\twifiList?: WifiAP[]\n}\ntype WifiScanEventListener = (event: WifiScanEvent) => void\nexport interface EspEventEmitter extends NativeEventEmitter {\n\taddListener(\n\t\teventType: 'scanWifi',\n\t\tlistener: WifiScanEventListener\n\t): EmitterSubscription\n}\n\ndeclare enum PermissionType {\n\tREQUEST_ENABLE_BT = 1,\n\tREQUEST_FINE_LOCATION = 2,\n}\n\ndeclare enum PermissionStatus {\n\tUNKNOWN = 0,\n\tLIMITED = 1,\n\tDENIED = 2,\n\tALLOWED = 3,\n}\nexport interface PermissionEvent {\n\ttype: PermissionType\n\tstatus: PermissionStatus\n}\ntype PermissionEventListener = (event: PermissionEvent) => void\nexport interface EspEventEmitter extends NativeEventEmitter {\n\taddListener(\n\t\teventType: 'permission',\n\t\tlistener: PermissionEventListener\n\t): EmitterSubscription\n}\n\ndeclare enum ProvisioningStatus {\n\tPROV_INIT_FAILED = 0,\n\tPROV_CONFIG_SENT = 1,\n\tPROV_CONFIG_FAILED = 2,\n\tPROV_CONFIG_APPLIED = 3,\n\tPROV_APPLY_FAILED = 4,\n\tPROV_COMPLETED = 5,\n\tPROV_FAILED = 6,\n}\nexport interface ProvisioningEvent {\n\tstatus: ProvisioningStatus\n\tmessage?: string\n}\n\ntype ProvisioningEventListener = (event: ProvisioningEvent) => void\nexport interface EspEventEmitter extends NativeEventEmitter {\n\taddListener(\n\t\teventType: 'provisioning',\n\t\tlistener: ProvisioningEventListener\n\t): EmitterSubscription\n}\n\nconst { RNEsp32Idf } = NativeModules as { RNEsp32Idf: EspProvisioning }\n\nconst eventEmitter: EspEventEmitter = new NativeEventEmitter(RNEsp32Idf as any)\n\nexport default RNEsp32Idf\n\nexport type MessageInfo = {\n\tscanBle: string\n\tscanWifi: string\n\tconnectDevice: string\n\tsendingWifiCredential: string\n\tconfirmWifiConnection: string\n\tenableBluetooth: string\n\tenableLocation: string\n\tscanBleFailed: string\n\tconnectFailed: string\n\tdisconnected: string\n\tinitSessionError: string\n\tcompleted: string\n\tapplyError: string\n}\n\ntype ProvisioningProps = {\n\tdevicePrefix: string | null\n\tpop?: string | null\n\tmessage: MessageInfo\n}\nexport function useProvisioning({\n\tdevicePrefix,\n\tpop = null,\n\tmessage,\n}: ProvisioningProps) {\n\tconsole.log('Invoke func useProvisioning')\n\tconst msg = useRef<MessageInfo>(message)\n\tconst [bleDevices, setBleDevices] = useState<BleDevice[]>([])\n\tconst [wifiAPs, setWifiAPs] = useState<WifiAP[]>([])\n\tconst [loading, setLoading] = useState(true)\n\tconst [status, setStatus] = useState(message.scanBle)\n\tconst isConnecting = useRef(false)\n\tconst [currentStep, setCurrentStep] = useState(1)\n\n\tconst [provSent, setProvSent] = useState(\n\t\tinitStep(message.sendingWifiCredential, true)\n\t)\n\tconst [provApplied, setProvApplied] = useState(\n\t\tinitStep(message.confirmWifiConnection)\n\t)\n\tconst [provFinal, setProvFinal] = useState(initStep(''))\n\n\tconst currentWifi = useRef<WifiAP>()\n\tconst currentDevice = useRef<BleDevice>()\n\n\tfunction connectDevice(bleDevice: BleDevice) {\n\t\tif (isConnecting.current) return\n\t\tisConnecting.current = true\n\t\tRNEsp32Idf.stopBleScan()\n\t\tconsole.log('Connect to device:', bleDevice, pop)\n\t\tsetStatus(message.connectDevice)\n\t\tcurrentDevice.current = bleDevice\n\t\tRNEsp32Idf.connectDevice(bleDevice.serviceUuid, pop)\n\t}\n\n\tfunction configWifi(wifi: WifiAP) {\n\t\tconsole.log('Selected Wifi:', wifi)\n\t\tcurrentWifi.current = wifi\n\t\tsetCurrentStep(!wifi.ssid || wifi.auth > 0 ? 3 : 4)\n\t\tif (!wifi.auth) {\n\t\t\tdoProvisioning(wifi)\n\t\t}\n\t}\n\n\tuseEffect(() => {\n\t\teventEmitter.addListener('scanWifi', (event) => {\n\t\t\tconsole.log('Event scanWifi', event)\n\t\t\tsetLoading(false)\n\t\t\tsetStatus('')\n\t\t\tif (event.wifiList) {\n\t\t\t\tsetWifiAPs(event.wifiList)\n\t\t\t} else if (event.message) {\n\t\t\t\tsetStatus(event.message)\n\t\t\t}\n\t\t})\n\t\treturn function () {\n\t\t\tconsole.log('Cleanup the resource')\n\t\t\tRNEsp32Idf.stopBleScan()\n\t\t\tRNEsp32Idf.disconnectDevice()\n\t\t\teventEmitter.removeAllListeners('scanWifi')\n\t\t}\n\t}, [])\n\tuseEffect(() => {\n\t\tconsole.log('Added AppSateChanged listener')\n\t\tasync function _handleAppStateChange(nextAppState: AppStateStatus) {\n\t\t\tconsole.log(`AppSateChanged: ${nextAppState}`)\n\t\t\tif (nextAppState === 'active') {\n\t\t\t\tconsole.log('Start checkPermissions')\n\t\t\t\tconst result = await RNEsp32Idf.checkPermissions()\n\t\t\t\tconsole.log(`checkPermissions result: ${result}`)\n\t\t\t\tif (result && !isConnecting.current && currentStep === 1) {\n\t\t\t\t\tconsole.log('Start BleScan')\n\t\t\t\t\tRNEsp32Idf.startBleScan(devicePrefix)\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tAppState.addEventListener('change', _handleAppStateChange)\n\n\t\teventEmitter.addListener('permission', (event) => {\n\t\t\tconsole.log('Event permission', event)\n\t\t\tif (event.status) {\n\t\t\t\tif (currentStep === 1 && !isConnecting.current) {\n\t\t\t\t\tRNEsp32Idf.startBleScan(devicePrefix)\n\t\t\t\t\tsetBleDevices([])\n\t\t\t\t} else if (currentStep === 2) {\n\t\t\t\t\tRNEsp32Idf.startWifiScan()\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tsetStatus(\n\t\t\t\t\tevent.type === 1\n\t\t\t\t\t\t? msg.current.enableBluetooth\n\t\t\t\t\t\t: msg.current.enableLocation\n\t\t\t\t)\n\t\t\t}\n\t\t})\n\t\treturn function () {\n\t\t\tconsole.log('Removed AppSateChanged listener')\n\t\t\teventEmitter.removeAllListeners('permission')\n\t\t\tAppState.removeEventListener('change', _handleAppStateChange)\n\t\t}\n\t}, [currentStep, devicePrefix])\n\n\tuseEffect(() => {\n\t\tconsole.log('Added listeners')\n\t\teventEmitter.addListener('scanBle', (event) => {\n\t\t\tconsole.log('Event scanBle', event)\n\t\t\tif (event instanceof Array) {\n\t\t\t\tsetBleDevices(event)\n\t\t\t} else if ((event as BleDevice).deviceName) {\n\t\t\t\tsetBleDevices((prev) =>\n\t\t\t\t\tprev.some((it) => it.serviceUuid === (event as BleDevice).serviceUuid)\n\t\t\t\t\t\t? prev\n\t\t\t\t\t\t: prev.concat(event as BleDevice)\n\t\t\t\t)\n\t\t\t} else if ((event as BleScanEvent).status === 0) {\n\t\t\t\tsetLoading(false)\n\t\t\t\tsetStatus(msg.current.scanBleFailed)\n\t\t\t} else {\n\t\t\t\tsetLoading(false)\n\t\t\t\tif (!isConnecting.current) setStatus('')\n\t\t\t}\n\t\t})\n\n\t\teventEmitter.addListener('connection', (event) => {\n\t\t\tisConnecting.current = false\n\t\t\tconsole.log('Event connection', event)\n\t\t\tswitch (event.status) {\n\t\t\t\tcase 1: //connected\n\t\t\t\t\tRNEsp32Idf.startWifiScan()\n\t\t\t\t\tsetCurrentStep(2)\n\t\t\t\t\tsetLoading(true)\n\t\t\t\t\tsetStatus(msg.current.scanWifi)\n\t\t\t\t\tbreak\n\t\t\t\tcase 2: //failed\n\t\t\t\t\tsetStatus(msg.current.connectFailed)\n\t\t\t\t\tbreak\n\t\t\t\tcase 3: //disconnected\n\t\t\t\t\tsetStatus(msg.current.disconnected)\n\t\t\t\t\tbreak\n\t\t\t}\n\t\t})\n\n\t\teventEmitter.addListener('provisioning', (event) => {\n\t\t\tconsole.log('Event provisioning', event)\n\t\t\tswitch (event.status) {\n\t\t\t\tcase 0:\n\t\t\t\tcase 2:\n\t\t\t\t\tsetProvSent(doneStep(event.message!, true))\n\t\t\t\t\tsetProvFinal(doneStep(msg.current.initSessionError, true))\n\t\t\t\t\tbreak\n\t\t\t\tcase 3:\n\t\t\t\t\tsetProvSent((prev) => ({ ...prev, done: true }))\n\t\t\t\t\tsetProvApplied((prev) => ({ ...prev, progress: true }))\n\t\t\t\t\tbreak\n\t\t\t\tcase 5:\n\t\t\t\t\tsetProvApplied((prev) => ({ ...prev, done: true }))\n\t\t\t\t\tsetProvFinal(doneStep(msg.current.completed))\n\t\t\t\t\tbreak\n\t\t\t\tdefault:\n\t\t\t\t\tsetProvApplied(doneStep(event.message!, false))\n\t\t\t\t\tsetProvFinal(doneStep(msg.current.applyError, true))\n\t\t\t}\n\t\t})\n\n\t\treturn function () {\n\t\t\tconsole.log('Removed listeners')\n\t\t\teventEmitter.removeAllListeners('scanBle')\n\t\t\teventEmitter.removeAllListeners('connection')\n\t\t\teventEmitter.removeAllListeners('provisioning')\n\t\t}\n\t}, [devicePrefix])\n\n\treturn {\n\t\tbleDevices,\n\t\twifiAPs,\n\t\tloading,\n\t\tstatus,\n\t\tcurrentStep,\n\t\tcurrentWifi,\n\t\tcurrentDevice,\n\t\tresults: [provSent, provApplied, provFinal],\n\t\tsetCurrentStep,\n\t\tconnectDevice,\n\t\tconfigWifi,\n\t\tdoProvisioning,\n\t}\n}\n\nfunction doProvisioning(_wifi: WifiAP | WifiAPWithPwd) {\n\tRNEsp32Idf.doProvisioning(_wifi.ssid, 'password' in _wifi ? _wifi.password : '')\n}\n\nexport type ProvisioningStepStatus = {\n\tdone: boolean\n\tprogress: boolean\n\tfailed: boolean\n\tmessage: string\n}\n\nfunction initStep(message: string, progress = false): ProvisioningStepStatus {\n\treturn {\n\t\tdone: false,\n\t\tprogress,\n\t\tfailed: false,\n\t\tmessage,\n\t}\n}\n\nfunction doneStep(message: string, failed = false): ProvisioningStepStatus {\n\treturn {\n\t\tprogress: false,\n\t\tdone: true,\n\t\tfailed,\n\t\tmessage,\n\t}\n}\n\n"]}